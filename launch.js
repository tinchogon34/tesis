// Generated by CoffeeScript 1.4.0
(function() {
  var api, client, compile_coffees, core, fs, reducer, spawn;

  spawn = require('child_process').spawn;

  fs = require('fs');

  api = core = reducer = client = null;

  console.log("compiling coffees");

  compile_coffees = spawn('./compile_coffees.sh');

  compile_coffees.on('exit', function(code) {
    var init_db;
    console.log("cleaning db");
    init_db = spawn('node', ['init_db.js', '-c', '-r', '0']);
    return init_db.on('exit', function(code) {
      var init_api_db;
      console.log("init api started");
      init_api_db = spawn('node', ['init_api_db.js'], {
        cwd: 'api'
      });
      return init_api_db.on('exit', function(code) {
        console.log("api started on port 8080");
        api = spawn('node', ['app.js'], {
          cwd: 'api'
        });
        return setTimeout(function() {
          var example;
          console.log("running example");
          example = spawn('node', ['app.js'], {
            cwd: 'examples/contador'
          });
          return example.on('exit', function(code) {
            var lock;
            console.log("server started on port 3000");
            fs.truncate('logs/core.log', 0, function() {});
            fs.truncate('logs/core.error.log', 0, function() {});
            core = spawn('node', ['app.js']);
            core.stdout.on('data', function(data) {
              return fs.appendFile('logs/core.log', data, null);
            });
            core.stderr.on('data', function(data) {
              return fs.appendFile('logs/core.error.log', data, null);
            });
            core.on('exit', function(code) {
              return console.log("core exit with code: " + code);
            });
            console.log("reducer started");
            fs.truncate('logs/reducer.log', 0, function() {});
            fs.truncate('logs/reducer.error.log', 0, function() {});
            lock = spawn('rm', ['.tesis.lock'], {
              cwd: '/var/tmp'
            });
            return lock.on('exit', function(code) {
              reducer = spawn('node', ['reducer.js']);
              reducer.stdout.on('data', function(data) {
                return fs.appendFile('logs/reducer.log', data, null);
              });
              reducer.stderr.on('data', function(data) {
                return fs.appendFile('logs/reducer.error.log', data, null);
              });
              reducer.on('exit', function(code) {
                return console.log("reducer exit with code: " + code);
              });
              console.log("client started on port 8000");
              fs.truncate('logs/client.log', 0, function() {});
              fs.truncate('logs/client.error.log', 0, function() {});
              client = spawn('./start.sh', [], {
                cwd: 'client'
              });
              client.stdout.on('data', function(data) {
                return fs.appendFile('logs/client.log', data, null);
              });
              client.on('exit', function(code) {
                return console.log("client exit: " + code);
              });
              return client.stderr.on('data', function(data) {
                return fs.appendFile('logs/client.error.log', data, null);
              });
            });
          });
        }, 5000);
      });
    });
  });

  process.stdin.resume();

  process.on('SIGINT', function() {
    if (api) {
      api.kill();
    }
    if (core) {
      core.kill();
    }
    if (reducer) {
      reducer.kill();
    }
    if (client) {
      client.kill();
    }
    return process.exit();
  });

}).call(this);
